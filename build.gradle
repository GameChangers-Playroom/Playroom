//import com.modrinth.minotaur.dependencies.ModDependency
import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'com.modrinth.minotaur' version '2.+'
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

//def ENV = System.getenv()
//def CHANGELOG = new File('CHANGELOG.md').exists() ? new File('CHANGELOG.md').text : ""

base {
	archivesName = project.archives_base_name
}

loom {
	accessWidenerPath = file("src/main/resources/playroom.accesswidener")
    splitEnvironmentSourceSets()

	mods {
		"playroom" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
    runs {
		// This adds a new gradle task that runs the datagen API: "gradlew runDatagen"
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=playroom"

			runDir "build/datagen"
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

repositories {
	maven { url "https://maven.wispforest.io" } //owo-lib
	maven { url "https://jitpack.io" } //Mixin extras & Renderer
	maven { url "https://maven.firstdarkdev.xyz/snapshots" }
	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://masa.dy.fi/maven" }
	maven { url 'https://maven.nucleoid.xyz' }
	maven { url "https://maven.isxander.dev/releases" }
	maven { url "https://maven.terraformersmc.com/releases" }
	maven { url "https://maven.quiltmc.org/repository/release" }
	maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven {
		url "https://cursemaven.com"
		content {
			includeGroup "curse.maven"
		}
	}
	maven {
		url "https://api.modrinth.com/maven"
		content {
			includeGroup("maven.modrinth")
		}
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft("com.mojang:minecraft:${project.minecraft_version}")
	mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
	modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

	modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")

	modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	include("io.wispforest:owo-sentinel:${project.owo_version}")

	modImplementation("dev.isxander.yacl:yet-another-config-lib-fabric:${project.yacl_version}")
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
	modImplementation("software.bernie.geckolib:geckolib-fabric-${project.minecraft_version}:${project.geckolib_version}")
	include modImplementation("me.lucko:fabric-permissions-api:${project.permissions_api_version}")

	include modImplementation("eu.pb4:placeholder-api:${project.placeholder_api_version}")
	include modImplementation("com.github.0x3C50:Renderer:${project.renderer_version}") {
		exclude group: "xml-apis", module: "xml-apis"
		exclude group: "commons-io", module: "commons-io"
		exclude group: "io.github.ladysnake", module: "satin"
	}

	//Local bundled jars
	include modImplementation(fileTree(dir: "libs", include: ["*.jar"]))

	//Non mod libraries
	//include implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${project.mixin_extras_version}"))
	include implementation("com.github.Chocohead:Fabric-ASM:v2.3")
	include implementation("com.fasterxml.jackson.core:jackson-core:2.16.0")
	include implementation("com.fasterxml.jackson.core:jackson-annotations:2.16.0")
	include implementation("com.fasterxml.jackson.core:jackson-databind:2.16.0")
	include implementation("org.apache.commons:commons-text:1.11.0")

	implementation("org.bouncycastle:bcprov-jdk18on:1.77")
	implementation("org.quiltmc.parsers:gson:0.2.1")

	implementation annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.1.1")

	//Compatibility
	modCompileOnly("curse.maven:project-297344:4623488") //Tweakeroo 0.17.1
	modCompileOnly("fi.dy.masa.malilib:malilib-fabric-${project.minecraft_version}:0.16.0")
	modCompileOnly("maven.modrinth:iris:1.6.8+1.20.1")
	
	//DevLogin
	modImplementation "com.ptsmods:devlogin:3.5"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.register('remapMavenJar', RemapJarTask) {
	dependsOn jar
	input = jar.archiveFile
	archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
	addNestedDependencies = false
}

tasks.build.dependsOn(tasks.remapMavenJar, tasks.runDatagen)
tasks.modrinth.dependsOn(tasks.remapMavenJar)

/*modrinth {
	String projectVersion = project.version.toString()
	if (projectVersion.contains("dev")) {
		System.err.println("Can not publish a dev version to Modrinth!")
		return
	}

	List<String> projectVersionNumber = projectVersion.split("-", 2)
	String projectVersionName = "Release ${projectVersionNumber[0]}"
	if (projectVersionNumber.size() == 2) {
		List<String> typeNumber = projectVersionNumber[1].split("\\.", 2)
		if (projectVersionNumber[1].startsWith("rc")) {
			projectVersionName = "${projectVersionNumber[0]} - Release Candidate ${typeNumber[1]}"
			versionType = "beta" //Modrinth doesn't have RC so I use beta
		} else if (projectVersionNumber[1].startsWith("beta")) {
			projectVersionName = "${projectVersionNumber[0]} - Beta ${typeNumber[1]}"
			versionType = "beta"
		} else if (projectVersionNumber[1].startsWith("alpha")) {
			projectVersionName = "${projectVersionNumber[0]} - Alpha ${typeNumber[1]}"
			versionType = "alpha"
		}
	}

	token = ENV.MODRINTH_TOKEN
	projectId = ""
	versionName = projectVersionName
	changelog = CHANGELOG
	uploadFile = remapJar
	dependencies = [
			new ModDependency("fabric-api", "required"),
			new ModDependency("yacl", "optional"),
			new ModDependency("modmenu", "optional")
	]
}*/
